{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "// Define HTML content\nconst htmlContent = `\n<style>\n    body {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 100vh;\n        margin: 0;\n        font-family: 'Arial', sans-serif;\n        background: linear-gradient(135deg, #89fffd, #ef32d9);\n    }\n\n    .game-container {\n        text-align: center;\n        background-color: #ffffff;\n        padding: 20px;\n        border-radius: 15px;\n        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\n    }\n\n    h1 {\n        font-size: 2rem;\n        color: #333;\n        margin-bottom: 10px;\n        font-weight: bold;\n    }\n\n    .board {\n        display: grid;\n        grid-template-columns: repeat(3, 100px);\n        grid-template-rows: repeat(3, 100px);\n        gap: 10px;\n        margin: 20px auto;\n    }\n\n    .cell {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        font-size: 3rem;\n        font-weight: bold;\n        cursor: pointer;\n        border-radius: 15px;\n        color: #333;\n        transition: transform 0.3s ease, background-color 0.3s ease;\n        background-color: #ffe6f7;\n    }\n\n    .cell:hover {\n        background-color: #ffe0e6;\n        transform: scale(1.1);\n    }\n\n    .cell.X {\n        color: #ef476f;\n        text-shadow: 0 4px 8px rgba(239, 71, 111, 0.4);\n    }\n\n    .cell.O {\n        color: #06d6a0;\n        text-shadow: 0 4px 8px rgba(6, 214, 160, 0.4);\n    }\n\n    button {\n        margin-top: 20px;\n        padding: 10px 20px;\n        font-size: 1rem;\n        font-weight: bold;\n        border: none;\n        border-radius: 5px;\n        color: white;\n        background: linear-gradient(45deg, #06d6a0, #ef476f);\n        cursor: pointer;\n        transition: background 0.3s ease;\n    }\n\n    button:hover {\n        background: linear-gradient(45deg, #ef476f, #06d6a0);\n    }\n\n    #message {\n        margin-top: 15px;\n        font-size: 1.2rem;\n        color: #333;\n        font-weight: bold;\n        animation: fadeIn 0.5s ease;\n    }\n\n    @keyframes fadeIn {\n        0% { opacity: 0; }\n        100% { opacity: 1; }\n    }\n</style>\n\n<div class=\"game-container\">\n    <h1>Tic Tac Toe</h1>\n    <div id=\"gameBoard\" class=\"board\">\n        ${Array.from({ length: 9 }, (_, i) => `<div class=\"cell\" data-index=\"${i}\"></div>`).join('')}\n    </div>\n    <button id=\"restartButton\">Restart Game</button>\n    <p id=\"message\"></p>\n</div>\n`;\n\n// Inject HTML into the notebook\ndocument.body.innerHTML = htmlContent;\n\n// JavaScript logic for Tic Tac Toe\nconst board = Array(9).fill(null);\nlet currentPlayer = \"X\";\nlet gameActive = true;\nconst messageElement = document.getElementById(\"message\");\nconst winningCombos = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8],\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    [0, 4, 8], [2, 4, 6]\n];\n\n// Function to handle cell click\nfunction handleCellClick(event) {\n    const cellIndex = event.target.getAttribute(\"data-index\");\n\n    // Ignore if cell is already filled or game is over\n    if (board[cellIndex] || !gameActive) return;\n\n    // Update board state and UI\n    board[cellIndex] = currentPlayer;\n    event.target.textContent = currentPlayer;\n    event.target.classList.add(currentPlayer);\n\n    // Check for win or draw\n    if (checkWin()) {\n        messageElement.textContent = `Player ${currentPlayer} Wins!`;\n        gameActive = false;\n        return;\n    } else if (board.every(cell => cell)) {\n        messageElement.textContent = \"It's a draw!\";\n        gameActive = false;\n        return;\n    }\n\n    // Switch player and update message\n    currentPlayer = currentPlayer === \"X\" ? \"O\" : \"X\";\n    messageElement.textContent = `Player ${currentPlayer}'s turn`;\n}\n\n// Function to check for win\nfunction checkWin() {\n    return winningCombos.some(combo => {\n        return combo.every(index => board[index] === currentPlayer);\n    });\n}\n\n// Function to restart the game\nfunction restartGame() {\n    board.fill(null);\n    gameActive = true;\n    currentPlayer = \"X\";\n    messageElement.textContent = `Player ${currentPlayer}'s turn`;\n\n    // Clear cell content and remove classes\n    document.querySelectorAll(\".cell\").forEach(cell => {\n        cell.textContent = \"\";\n        cell.classList.remove(\"X\", \"O\");\n    });\n}\n\n// Add event listeners to each cell\ndocument.querySelectorAll(\".cell\").forEach(cell => {\n    cell.addEventListener(\"click\", handleCellClick);\n});\n\n// Event listener for the restart button\ndocument.getElementById(\"restartButton\").addEventListener(\"click\", restartGame);\n\n// Initialize the game state\nmessageElement.textContent = `Player ${currentPlayer}'s turn`;\n",
      "status": "",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}